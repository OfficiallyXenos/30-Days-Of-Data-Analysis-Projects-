# -*- coding: utf-8 -*-
"""Employee Records Analysis: Data Filtering & Selection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17W0Sa7pqRwxRoEWC3LYcRG7z7fUJ5Czw
"""

import pandas as pd
df = pd.read_csv('/content/employee_records.csv')
df.head()

"""# 1️⃣ Basic Data Exploration"""

df.info()
df.shape
df.describe()
df.dtypes
df.columns

# converting column names to snale case
df.columns = df.columns.str.lower().str.replace(' ($)', '').str.replace(' ', '_')
df.columns

df['join_date'] = pd.to_datetime(df['join_date'])
df['join_month'] = df['join_date'].dt.month_name()
df['join_year'] = df['join_date'].dt.year

# Count the number of employees in each department.
print(df['department'].value_counts())
# Find the average salary of all employees.
print(df['salary'].mean())
# Find the highest and lowest salaries.
print(df['salary'].max(), df['salary'].min())

for column in ['department', 'work_location', 'employment_type', 'promoted']:
    df[column] = df[column].str.lower()

"""# 2️⃣ Filtering Based on Conditions"""

# Select all employees in the IT department.
it_dept_employees = df[df['department'] == 'it']
print(f'There are {it_dept_employees.shape[0]} IT employees')

# Extract employees older than 50 years
employees_over_50 = df[df['age'] > 50]
print(f'There are {employees_over_50.shape[0]} employees older the 50 years' )

# Find employees earning more than $100,000.
over_100k_earners = df[df['salary'] > 100000]
print(f'{over_100k_earners.shape[0]} employees earn over $100,000')

# Get all employees who joined before 2015.
employed_before_2015 = df[df['join_year'] < 2015]
print(f'{employed_before_2015.shape[0]} employees were employed before 2015')

performance_over_8 = df[df['performance_score'] > 8]
print(f'{performance_over_8.shape[0]} employees have a performance score over 8')

"""# 3️⃣ Advanced Filtering"""

# Find all HR employees working remotely
remote_hr = df[(df['work_location'] == 'remote') & (df['department'] == 'hr')]
print(f'{remote_hr.shape[0]} HR employees work remotely')

# Get Engineering employees who are Full-time and earn more than $120,000.
fulltime_engineers_over_120k = df[
    (df['department'] == 'engineering') &
    (df['employment_type'] == 'full-time') &
    (df['salary'] > 120000)]
print(f'{fulltime_engineers_over_120k.shape[0]} Full-time engineers earn over $120,000')

# Extract Marketing employees who were promoted.
promoted_marketers = df[(df['department'] == 'marketing') & (df['promoted'] == 'yes')]
print(f'{promoted_marketers.shape[0]} employees in the Marketing department were promoted')

# find part-time employees older than 45.
parttime_over_45 = df[(df['employment_type'] == 'part-time') & (df['age'] > 45)]
print(f'{parttime_over_45.shape[0]} part-time employees are over 45 years old')

employees_not_in_sales = df[df['department'] != 'sales']
print(f'{employees_not_in_sales.shape[0]} employees are not in the Sales department')

"""# 4️⃣ Using .query() for Filtering"""

# Use .query() to find employees in Finance earning over $90,000.
finance_over_90k = df.query("department == 'finance' and salary > 90000")
print(f'{finance_over_90k.shape[0]} employees in the Finance department earn over $90,000')


# Use .query() to extract Hybrid workers with performance scores above 7.
hybrid_workers_perf_over_7 = df.query('employment_type == "hybrid" and performance_score > 7')
print(f'{hybrid_workers_perf_over_7.shape[0]} Hybrid workers have a performance score over 7')

# Use .query() to find employees promoted after 2020.
promoted_after_2020 = df.query("promoted == 'yes' and join_year > 2020")
print(f'{promoted_after_2020.shape[0]} employees were promoted after 2020')

# Use .query() to get IT employees with salaries between $60,000 and $90,000.
it_salaries_btw_60k_and_90k = df.query('department == "it" and salary >= 60000 and salary <= 90000')
print(f'{it_salaries_btw_60k_and_90k.shape[0]} IT employees earn between $60,000 and $90,000')

# Use .query() to find employees who were not promoted and have a low performance score (< 4).
not_promoted_low_perf = df.query('promoted == "no" and performance_score < 4')
print(f'{not_promoted_low_perf.shape[0]} employees were not promoted and have a low performance score (< 4)')

"""# 5️⃣ Using .loc[] and .iloc[] for Selection"""

# Use .loc[] to get all columns for employees aged 30-40.
age_30_to_40 = df.loc[(df['age'] >= 30) & (df['age'] <= 40)]
print(age_30_to_40)
# Use .loc[] to extract only Employee_ID, Name, and Salary for employees earning over $70,000.
ovr_70k = df.loc[df['salary'] > 70000, ['employee_id', 'name', 'salary']]
# Use .iloc[] to get the first 10 employees in the dataset.
first_10 = df.iloc[:10]
# Use .iloc[] to extract the 5th to 15th rows and only Department & Salary.
department_salary = df.iloc[5:16, [3, 6]]
# Use .iloc[] to get the last 20 rows of the dataset.
last_20 = df.iloc[-20:]

