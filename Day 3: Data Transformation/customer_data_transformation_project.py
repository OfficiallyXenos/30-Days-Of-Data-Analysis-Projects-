# -*- coding: utf-8 -*-
"""Customer Data Transformation Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aytfY21WyiWONILE1lK3di2Xa5_XbPVA

# 1️⃣ Column Renaming & Restructuring
"""

import pandas as pd
df = pd.read_csv('/content/customer_transactions.csv')

# convert all column names to snake case
df.columns = df.columns.str.lower().str.replace(' ($)', '').str.replace(' (%)', '').str.replace(' ', '_')
df.columns

# converting the date column to datetime format
df['purchase_date'] = pd.to_datetime(
    df['purchase_date'], format='mixed', dayfirst= False
    )

# converted payment methods to snakecase
df['payment_method'] = df['payment_method'].str.lower().str.replace(' ', '_')
df['payment_method'].unique()

"""# 2️⃣ Creating & Modifying Columns"""

# Fill missing values in Total_Price by multiplying Quantity × Unit_Price.
new_total_price = df['quantity'] * df['unit_price']
df['total_price'].fillna(new_total_price, inplace=True)

# Fill missing values in Discount_Applied with 0%.
df['discount_applied'].fillna('0%', inplace=True)
df['discount_applied'] = df['discount_applied'].str.replace('%', '').astype(float)/100

# Create a new column Final_Price that applies the discount
df['final_price'] = df['total_price'] * (1-df['discount_applied'])

df['purchase_year'] = df['purchase_date'].dt.year
df['purchase_month'] = df['purchase_date'].dt.month_name()

"""# 3️⃣ Using `.apply()` & `lambda` Functions"""

# creating a purchase type column
df['purchase_type'] = df['quantity'].apply(
    lambda x: 'bulk' if x > 5 else 'single item'
    )

# categorizing unit price
df['price_category'] = df['unit_price'].apply(
    lambda price: 'Low' if price < 20 else ('Medium' if price <= 100 else 'High')
    )

# standardizing product category
df['product_category'] = df['product_category'].apply(lambda x: x.capitalize())

# flagging high value transactions
df['transaction_flag'] = df['final_price'].apply(lambda x: 'High Value' if x > 100 else 'Low Value')

df.head()

"""# 4️⃣ Reshaping Data (Pivot, Melt, Stack, Unstack)"""

# using the melt method
var_columns = ['unit_price', 'final_price', 'total_price']
id_columns = [col for col in df.columns if col not in var_columns]
melted_df = df.melt(
    id_vars=id_columns, value_vars=var_columns,
    var_name='price_type', value_name='price_value'
    )
melted_df.head()

# Use .pivot() to restructure data by showing Total_Sales per Customer_ID.
pivoted_data = df.pivot_table(
    index='customer_id',
    values='total_price', aggfunc = 'sum')
pivoted_data.head()

# stacking the data
stacked_data = df.stack()
stacked_data.head()

# Average Final Price per Product_Category table
avg_price_by_category = df.pivot_table(index = 'product_category',
                                       values = 'final_price',
                                       aggfunc = 'mean')
avg_price_by_category.head()

# Total Discount Applied per Payment_Method summary method
total_discount_by_method = df.pivot_table(index = 'payment_method',
                                          values = 'discount_applied',
                                          aggfunc = 'sum')
total_discount_by_method.head()

"""# 5️⃣ Handling Duplicate & Missing Data"""

df.duplicated().sum()

df[df.duplicated()]

df.to_csv('transformed_customer_data.csv', index=False)
print("Cleaned dataset saved to transformed_customer_data.csv")

